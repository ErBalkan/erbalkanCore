package com.erbalkan.cqrs.behavior.command.authorization;

import com.erbalkan.cqrs.behavior.command.ICommandBehavior;
import com.erbalkan.cqrs.command.ICommand;
import com.erbalkan.result.Result;
import com.erbalkan.result.ResultCode;

public class AuthorizationCommandBehavior<TResult>
implements ICommandBehavior<ICommand, TResult>
{
    private final ICommandAuthorizer _authorizer;
    
    public AuthorizationCommandBehavior(ICommandAuthorizer authorizer) {
        _authorizer = authorizer;
    }

    @Override
    public Result<TResult> handle(ICommand command, INextCommandHandler<ICommand, TResult> next) {
        if(!_authorizer.isAuthorized(command)){
            return Result.failure(ResultCode.UNAUTHORIZED, "Yetkisiz iÅŸlem.");
        }
        return next.handle(command);
    }
}

/*
ðŸ§© Behavior Zinciri NasÄ±l Ã‡alÄ±ÅŸÄ±r?
Ã–rneÄŸin Mediator.send(command) Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda zincir ÅŸÃ¶yle iÅŸler:
LoggingBehavior â†’ ValidationBehavior â†’ AuthorizationBehavior â†’ CommandHandler
Her behavior:

next.handle(command) diyerek zinciri bir sonrakine devreder.

Zinciri durdurabilir (Ã¶rneÄŸin validasyon hatasÄ± varsa).


*/
